    2ПРИЛОЖЕНИЕ 5.
    2Ошибки программирования. 0  2Теория ошибок 0 ( 1шутливая 0)

 ш1.0
                 1Если Вы думаете, что разработка и кодирование прог-
                 1раммы 0  1- вещь трудная, то Вы еще ничего не видели. 0
                                                  1Популярный афоризм
 ш1.2

    _ 1Основные понятия . 0:
 ш1.0
    1- шутливая классификация ошибок  программирования 0: 1  ошибка  Бора,
 1ошибка Гейзенберга, ошибка Мандельброта, ошибка Шрёдингера 0.
 ш1.2

    2Определение 0 [Майерс,1980,1982].
 ш1.1
   Будем говорить, что  _ 1в программе имеется ошибка . 0, если её выполне-
ние не оправдывает ожиданий пользователя.

 ш1.2
   Оказывается, что  практически  невозможно для достаточно сложной
программы быстро найти и устранить все имеющиеся в ней ошибки.
   Однако неопытный  программист,  как правило,  переоценивает свои
возможности и, разрабатывая программу, исходит из того, что в прог-
рамме  ошибок не будет.  А говоря про только что составленную прог-
рамму, готов уверять, что она на 99% правильна, и её остаётся толь-
ко  для  большей  уверенности  один  или  два (!) раза выполнить на
компьютере с какими-нибудь (!) исходными данными.  Естественно, что
каждый неверный результат, каждая найденная ошибка вызывают изумле-
ние и считаются, конечно, последними. Вследствие такого подхода по-
лучение надёжных результатов по составленной программе откладывает-
ся на длительный и неопределённый срок.
   Даже профессиональные разработчики иногда недооценивают реальный
уровень ошибок,  что приводит к сдвигу сроков завершения разработки
программ, увеличению реальных затрат ресурсов в 2-3 раза по сравне-
нию с первоначальными оценками.
   Трудности программирования  подчеркивает  следующий популярный в
среде программистов афоризм:
 ш1.0

   " 1В каждой программе есть по крайней мере одна ошибка 0".

 ш1.2
   Поэтому можно сказать,  что наличие ошибок в только что разрабо-
танной программе - вполне нормальное и закономерное явление.
   А совсем из ряда вон выходящим фактом является отсутствие ошибок
в программе, которая не была ещё подвергнута тщательному тестирова-
нию и отладке.
   Поэтому разумно  уже при разработке программы на этапах алгорит-
мизации и программирования готовиться к обнаружению ошибок на  ста-
дии  отладки  и принимать профилактические меры для их предупрежде-
ния.  Более того, целесообразно сосредоточить усилия на поиске мак-
симального  числа  ошибок на возможно более ранних стадиях отладки,
когда стоимость их обнаружения минимальна.
                   21. 0  3Типы ошибок программирования
    _ 1Ошибки . 0, которые  могут  быть  допущены  человеком  при написании
программы, можно разделить на три вида:
 ш1.1
   (1) 3  _ 1синтаксические ошибки . 0 возникают при вызове команды,  не вхо-
дящей  в систему команд конкретного языка программирования;  обычно
их обнаруживает   1транслятор 0  (компилятор или интерпретатор) данного
языка программирования;
   (2)  _ 1семантические ошибки . 0 возникают при вызове команды  в  ситуа-
ции, когда эта команда не может быть исполнена, эти ошибки приводят
к отказу транслятора;
   (3) 1  _логические ошибки . 0 возникают, если 1  0компьютер "выполнил" прог-
рамму,  но цель,  поставленная человеком, не достигнута. Эти ошибки
не фиксируются ни компьютером, ни компилятором.

 ш1.2
   Важно понимать,  что  "безотказное"  выполнение программы ещё не
означает её  _ 1правильность . 0.

              22. 0  3Классификация ошибок 0  3программирования
                           ( 1шутливая 0)

 ш1.0
                       1Чтобы избегать ошибок, надо набираться опыта,
                       1чтобы набираться опыта, надо делать ошибки. 0
                                       1Принцип компетентности Питера
 ш1.2

   Приведём классификацию типов ошибок, названных в честь очень из-
вестных учёных (Н.Бора,  В.Гейзенберга, Б.Мандельброта, Э.Шрёдинге-
ра) (по [Хэзфилд,Кирби,2001,с.161-163]).
   Ошибки классифицированы скорее по их симптомам, чем по причинам,
их вызывающих.

    2А. 0  _ 1Ошибка Бора . 0 - ошибка, имеющая простую (возможно, неизвестную)
причину.  Если  причина  обнаружена и удалена или внесены изменения
нужным образом, то ошибка пропадает.
   К счастью, большинство ошибок попадает именно в эту категорию.
   Такие детерминистические ошибки проще всего найти и исправить.
   Например, оператор вывода с неверным текстом сообщения относится
к детерминистическим ошибкам.
   Ошибками Бора чаще всего являются простые ошибки логики приложе-
ний,  опечатки,  приводящие к правильному коду (например,  = вместо
==), случайно закомментированные части программы и т.п.

    2Б. 0  _ 1Ошибка Гейзенберга . 0 ( 1Гейзенбаг 0) - это прекрасное название  для
рассматриваемого класса ошибок.
   Каламбур удачен,  т.к. вольно пересказанный принцип неопределён-
ности Гейзенберга звучит приблизительно так:  1нельзя наблюдать явле-
 1ние,  не изменив его 0. Эта ситуация характерна для квантовой физики,
но для программистов является настоящим кошмаром.
   Опишем этот тип ошибок.
   Ваша программа не работает; хорошо, используем отладчик.
   Вы знаете,  что  она не работает,  поэтому аккуратно работаете в
пошаговом режиме. Она работает. Отлично!
   Вы вновь запускаете её вне отладчика. Она не работает.
   Вы опять прогоняете её под отладчиком, но уже без пошагового ре-
жима. Она работает.
   Ага! Она работает только тогда,  когда вы пытаетесь  "выследить"
ошибку.
   Возникают два естественных вопроса:  " 1Почему это происходит 0?"  и
" 1Что я могу сделать 0?".
   Обычно ошибка Гейзенберга говорит о  недопустимом  использовании
памяти исполнителя программы:  либо какой-то указатель неверно "ус-
тановлен", либо неверен используемый индекс массива.
   Если мы  затрагиваем  не отведённую нам область памяти (неважно,
для чтения или для записи), то мы вызываем неопределённое поведение
программы.  Проблема с неопределённым поведением состоит в том, что
мы не можем определить его, поэтому не следует удивляться тому, что
"вытворяет" программа.
   Рассмотрим пример неинициализированного указателя:
 ш1.0

   char *p;

и результат действия такого оператора:

   strcpy(p,q);

 ш1.2
где q - некоторый допустимый указатель, указывающий на сравнительно
длинную  строку.  Компилятор  выделит  некоторую область памяти для
указателя p так же,  как он выделяет память для любой другой  пере-
менной. Содержимое, находящееся по адресу, на который указывает пе-
ременная p, может быть произвольным.
   Каковы теперь шансы на то, что p указывает на безопасную область
памяти? Возможно,  p указывает на безопасную область, а может быть,
и нет. Точно сказать невозможно.
   Ошибка Гейзенберга возникает,  если указатель p не указывает  на
безопасную область памяти, вызывая ошибку выполнения программы.
   Поэтому вы запускаете отладчик,  что приводит к перемещению дан-
ных  в памяти,  и в результате этого p начинает указывать на совер-
шенно безобидное место.
   Что же можно с этим поделать?  Первая линия обороны строится пу-
тём инициализации  _ 1всех указателей . 0 в NULL при определении (это долж-
но стать привычкой).
   Если этого недостаточно, то приходит время использовать отладчик
или (если  программа  работает в реальном режиме времени) трассиро-
вочный код.

    2В. 0  _ 1Ошибки Мандельброта ..  0Некоторые ошибки кажутся совершенно слу-
чайными.
   Лежащие в их основе причины представляются непостижимо сложными,
как  1множество Мандельброта 0, в честь которого они и названы):
 ш1.1
   (1) программа работает в течение только 70%  времени (для  конк-
ретных входных данных);
   (2) или работает только вне отладчика (в противоположность ошиб-
ки Гейзенберга);
   (3) или выдаёт ложные результаты в среду;
   (4) или работает только на компьютере приятеля и т.п.
 ш1.0

    4┌ 0─────────────────────────────────────────────────── 4┐
   │Наиболее раздражающей является ошибка Мандельброта,│
   │при которой прекращается даже выполнение программы.│
   │Это особенно расстраивает,  если известно, что ваша│
   │программа прекрасно работает на другой платформе.  │
    4└ 0─────────────────────────────────────────────────── 4┘

 ш1.2
   Когда оказываешься в такой ситуации, естественно, предполагаешь,
что какая-то часть программы работает правильно,  а в  чём-то  есть
ошибка. Поэтому можно начать с пустой функции main() и добавлять за
один раз определённую её часть, проводя затем проверку.
   В конце концов,  мы внесём ошибку, из-за которой останавливается
программа. Это локализует ошибку.
   Конечно, можно начать с полной программы,  убирая модули,  функ-
ции,  строки; в определённый момент программа будет выполняться без
ошибки неверного обращения к памяти, что также может помочь в реше-
нии проблемы.
   Обе эти стратегии не содержат риска до тех пор,  пока вы храните
резервную копию программы.
   Когда обнаруживается  сегмент  программы,  в котором (как кажет-
ся?!) находится ошибка,  то необходимо вернуться  вновь  к  упорной
"детективной работе" по поиску ошибок.

    2Г. 0 В  мысленном  эксперименте  Э.Шрёдингера,  который называется
"Котом Шрёдингера" гипотетический кот помещается в закрытую коробку
при обстоятельствах,  которые приводят к удивительному выводу:  кот
одновременно оказывается и живым,  и мёртвым. Но, заглянув в короб-
ку, мы получим совершенно определённую ситуацию.
   Э.Шрёдингер придумал этот умозрительный эксперимент для  демонс-
трации ситуации, неотъемлемо присущей квантовой теории.
    _ 1Ошибка Шрёдингера . 0 - это ошибка, находящаяся в состоянии спячки.
   Программа служит в течение многих лет.
   Затем кто-то находит ошибку,  читая старый листинг исходного ко-
да. В  этот момент программа перестаёт работать и начинает работать
снова, только когда ошибка исправлена.
   Сам факт  нахождения  ошибки  превращает  две  возможности (есть
ошибка или её нет) в твёрдую уверенность, что она есть.
   Звучит невероятно, не так ли? Но такие случаи существуют.
   Не так просто найти рациональное объяснение этому:
   (1) либо  ошибка находилась в мало используемой части программы;
   (2) либо влияла на результаты  работы  программы  несущественным
образом.
   Итак, ошибка была в программе всё время, но никто её не замечал.
   Когда вы  выявили ошибку в листинге и начали искать отклонения в
поведении программы, то вы их найдёте обязательно.
   Истинная ошибка Шрёдингера интересна, но трудна в исследовании.
   По определению,  вы знаете, где в коде присутствует ошибка, поэ-
тому вопрос заключается только в её использовании.
    _ 1Вопрос . 0 ( 1шутливый 0).
 ш1.1
   Придумайте ошибки программирования, которые заслуживают названия
 _ 1ошибок Эйнштейна . 0 (см.  1Замечание 0, приведённое ниже).

 ш1.2
    3Замечание 0 [Оханьян,2009] ( 1хронология ошибок А.Эйнштейна 0).
 ш1.1
    21905 0. Ошибка  в  процедуре синхронизации часов,  на которой Эйн-
штейн основывал специальную теорию относительности.
    21905 0. Неудача при рассмотрении опыта Майкельсона-Морли.
    21905 0. Ошибка в определении  "поперечной массы"  высокоскоростных
         частиц.
    21905 0. Многочисленные математические и физические ошибки при рас-
         чётах вязкости жидкостей, из которых Эйнштейн выводил раз-
         мер молекул.
    21905 0. Ошибки в отношении теплового излучения и квантов света.
    21905 0. Ошибка в  _ 1первом . 0 доказательстве формулы E=mc 52 0.
    21906-1907 0. Ошибки во  _ 1втором . 0,  _ 1третьем . 0 и  _ 1четвёртом . 0 доказательствах
              формулы E=mc 52 0.
    21907 0. Ошибка в процедуре синхронизации ускоряющихся часов.
    21907-1915 0. Ошибки в принципе эквивалентности гравитации и  уско-
              рения.
    21911 0. Ошибки в первом вычислении отклонения света.
    21913 0. Ошибка  в первой попытке создания общей теории относитель-
         ности.
    21914 0. Ошибка в  _ 1пятом . 0 доказательстве формулы E=mc 52 0.
    21915 0. Ошибка в опыте Эйнштейна-де Хааса.
    21915 0. Ошибки в нескольких попытках создания общей теории относи-
         тельности.
    21916 0. Ошибка в трактовке принципа Маха.
    21917 0. Ошибка  во  введении  космологической  постоянной  ("самая
         большая ошибка").
    21919 0. Ошибки в двух попытках изменить общую  теорию  относитель-
         ности.
    21925-1955 0. Многочисленные  ошибки  при  попытках  сформулировать
         единую теорию поля.
    21927 0. Ошибки в дискуссиях с Бором о принципе неопределённости  в
         квантовой физике.
    21933 0. Ошибки в трактовке квантовой механики ("Играет  ли  бог  в
         кости?").
    21934 0. Ошибка в шестом доказательстве формулы E=mc 52 0.
    21939 0. Ошибки  в трактовке сингулярности Шварцшильда и гравитаци-
онного коллапса ("чёрная дыра").
    21946 0. Ошибка в седьмом доказательстве формулы E=mc 52 0.
 ш1.2

                            2Теория ошибок 0
                        ( 1автор: В.Тихонов 0)

 ш1.0
                             1Ошибки так же неисчерпаемы, как и атом.
 ш1.2

                         21. 3 Аксиомы и законы
    _ 1Аксиома . 0. В любой программе есть ошибки.
    _ 1Закон пропорциональности . 0.
 ш1.1
   Чем больше программа необходима, тем больше в ней ошибок.

 ш1.2
    _ 1Следствие .. 0
 ш1.1
   Ошибок не содержит лишь совершенно ненужная программа.

 ш1.2
    _ 1Фундаментальный закон теории ошибок . 0.
 ш1.1
   На ошибках учатся.

 ш1.2
    _ 1Следствия ..
 ш1.0
    21. 0 Программист, написавший программу, становится учёным.
    22. 0 Чем больше программист делает ошибок,  тем быстрее он  стано-
вится учёным.
    23. 0 Крупный учёный-программист никогда не пишет правильной  прог-
раммы.

 ш1.2
    3Замечание 1.
 ш1.1
   На то он и учёный.

 ш1.2
    1Указание начинающему программисту. 0
 ш1.1
   Если вы с первого раза  сумели  написать  программу,  в  которой
транслятор не обнаружил ни одной ошибки, сообщите об этом системно-
му программисту. Он исправит ошибки в трансляторе.

 ш1.2
    _ 1Закон находимости ошибок . 0.
 ш1.1
   Программист может обнаружить ошибку только в чужой программе.

 ш1.2
    _ 1Следствие .. 0
 ш1.1
   Ошибке не все равно, кто её обнаружил.

 ш1.2
    _ 1Совет начинающему программисту ..
 ш1.1
   Никогда не исправляйте найденные ошибки, ибо это повлечет за со-
бой  появление  неизвестного числа ненайденных.  Лучше опишите их в
сопроводительной документации как особенность программы.

 ш1.2
                           22. 0  3Язык ошибок
   Будем называть  _ 1языком ошибок . 0 некоторые правила,  в обход которых
пишутся программы.
   1. Ошибки могут следовать друг за другом.
   2. От перестановки двух эквивалентных ошибок результат не  меня-
ется (коммутативность эквивалентных ошибок).
   3. Две последовательные ошибки можно  объединить  в  одну  более
сильную.
   4. Одинаковые ошибки необязательно делать каждый раз, достаточно
сделать одну, а затем обращаться к ней по мере необходимости из лю-
бого места программы.
   5. Ошибки могут образовывать циклы.
   Наиболее устойчивый из них - бесконечный.
   6. Ошибки  могут  вызывать друг друга и сами себя (рекурсивность
ошибок).
   7. Ошибки допускают многократное вложение друг в друга.
   8. Две одинаковые вложенные ошибки называются  _ 1чётной  ошибкой . 0  и
ошибкой не являются.

 ш1.2
    _ 1Свойство чётности ошибок ..
 ш1.1
   Если написанная программа выполнилась правильно,  то это значит,
что во время её работы выполнилось чётное число ошибок или програм-
мист не понял задание.

 ш1.2
    _ 1Свойство чётности ошибок 0  1для политиков . 0.
 ш1.1
   Ошибка, повторенная дважды, перестает быть ошибкой.

 ш1.2
                      23. 0  3Взаимодействие ошибок
                       3с операционной системой 0
   1. Во время исполнения программы ошибки имеют наивысший  приори-
тет.
   2. Прервать исполнение ошибки может только другая,  более актив-
ная ошибка.
   3. Запросы операционной системы к ошибкам ошибками могут игнори-
роваться.
   4. Запросы ошибок к операционной системе игнорироваться не могут.
   5. При  работе с файлами ошибки могут пользоваться файловой сис-
темой базовой операционной системы и её ошибками.
   6. На  компьютере  с параллельной архитектурой может выполняться
несколько ошибок одновременно.
                     24. 0  3Взаимодействие ошибок с
                       3системными программами
   Системные программы облегчают процесс написания прикладных прог-
рамм и порождение их ошибок.
    2Определение 0.
 ш1.1
    _ 1Тестирование . 2  0- это процесс нахождения ошибок в тесте.

 ш1.2
   1. Хороший тест должен содержать ошибки,  компенсирующие их нех-
ватку в тестируемой программе.
   2. Языковый редактор, призванный уберечь программиста от синтак-
сических ошибок,  позволяет вносить в программу  весьма  хитроумные
ошибки,  которые не удается обнаружить ни транслятором, ни отладчи-
ком.
   3. Обычный текстовый редактор таких возможностей не предоставля-
ет.
   4. Программа-транслятор, предназначенная для перевода программ с
языка высокого уровня на  машинный  язык,  при  переводе  порождает
ошибки.
   Ошибки, которые содержались в исходном описании, переводятся бе-
зошибочно.
    _ 1Заключительный совет . 0 ( 1тем, кто до него добрался 0).
 ш1.1
   До начала  работы  над  проектом следует тщательно продумать все
необходимые ошибки и связи между ними. Это значительно упростит ра-
боту над ошибками в самом проекте.
 ш1.2
