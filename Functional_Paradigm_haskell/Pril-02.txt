    2ПРИЛОЖЕНИЕ 2.
    2Команды консоли интегрированной среды разработки HUGS 98

    _ 1Консоль . 0 интегрированной  среды  разработки HUGS 98 предоставляет
профессиональным пользователям возможность ускорить процесс  разра-
ботки  программы за счёт использования набора служебных инструкций,
позволяющих управлять средой.
   Многие из  встроенных команд дублируют действия кнопок на  _ 1панели
 _ 1инструментов . 0 и некоторые пункты  _ 1главного меню . 0.
   Каждая команда  начинается  с  символа " 2: 0" (двоеточие),  который
позволяет отличать встроенные команды от функций,  написанных прог-
раммистом:
 ш1.0

   Hugs>  2: 0< 1Команда 0>

 ш1.2
   Интегрированная среда  позволяет  сокращать  название команды до
одной буквы: достаточно набрать символ ":" и первую букву команды.
   Приведём набор  _ 1команд интегрированной среды . 0  1HUGS 98 0 (19 команд).
 ш1.0

    4┌ 0─────────────────────────────────────── 4┐
   │Первые 8 команд  1используются постоянно 0!│
    4└ 0─────────────────────────────────────── 4┘

 ш1.2
    21. 0 Вывод на экран списка команд среды с кратким описанием:
 ш1.0

    2:?

 ш1.2
    22. 0 Задание параметров интегрированной среды с командной строки:
 ш1.0
         4Внимание! 0       4Внимание!
           ═о 0               ═о
    2:set 0 [-< 1Параметр_1 0> [+< 1Параметр_2 0>...]]

 ш1.2
   Дублирует действие диалогового окна настройки HUGS 98.
   Запуск команды без параметров позволит  получить  полный  список
параметров интегрированной среды.
    23. 0 Вывод на экран дисплея описание заданных имён объектов:
 ш1.0

    2:info 0 < 1Имя_объекта_1 0> [< 1Имя_объекта_2 0>...]

 ш1.2
   Например, если объектом является функция,  то выводится  её  тип
вместе с её именем.
    24. 0 Вычисление значения заданной функции ("выражения"):
 ш1.0

   < 1Выражение 0>

 ш1.2
   Например, команда main запустит на выполнение функцию main,  что
произведёт дублирование кнопки с панели инструментов.
    25. 0 Вывод типа заданной функции ("выражения") на экран дисплея:
 ш1.0

    2:type 0 < 1Выражение 0>

 ш1.2
   Эта  _ 1команда используется очень часто . 0;  например,  в процессе от-
ладки для  быстрого получения типа создаваемого выражения (перемен-
ной, функции, сложного объекта).
    26. 0 Принудительный запуск на выполнение процесса  _ 1сборки мусора . 0:
 ш1.0

    2:gc

 ш1.2
   После запуска данной команды на выполнение на экран дисплея  вы-
водится статистика о собранных и восстановленных ячейках памяти.
    27. 0 Команда  загрузки  модулей  из  заданных файлов (имена файлов
можно разделить пробелом):
 ш1.0

    2:load 0 [< 1Имя_файла_1 0> [< 1Имя_файла_2 0>...]]

 ш1.2
   Дублирует кнопку загрузки модулей на панели инструментов.
   Если имена файлов отсутствуют, то происходит выгрузка всех моду-
лей, кроме стандартного модуля Prelude.hs.
   При повторном использовании команды все ранее загруженные модули
выгружаются из памяти интерпретатора.
    28. 0 Возвращение в операционную систему:
 ш1.0

    2:quit

 ш1.2
    29. 0 Вызов внешнего текстового редактора для исправления указанно-
го файла:
 ш1.0

    2:edit 0 [< 1Имя_файла 0>]

 ш1.2
   Если имя файла не указано,  то на редактирование вызывается пос-
ледний файл (загруженный или редактированный).
   Команда дублирует кнопку вызова внешнего текстового редактора на
панели инструментов.
    210. 0 Подгружение дополнительных модулей в текущий проект:
 ш1.0

    2:also 0 < 1Имя_файла_1 0> [< 1Имя_файла_2 0>...]

 ш1.2
   Имена файлов должны быть разделены пробелами  (если  указывается
более чем один файл).
    211. 0 Повторение последней выполненной команды загрузки (:load):
 ш1.0

    2:reload

 ш1.2
   Позволяет выполнить перезагрузку модуля в случае, если он редак-
тируется во внешнем текстовом редакторе.
    212. 0 Загрузка и использование файла проекта:
 ш1.0

    2:project 0 < 1Имя_файла 0>

 ш1.2
   Загрузить можно только один файл. Файлы проекта используются для
объединения разрозненных файлов с кодом.
   При повторном  использовании  команды  происходит  выгрузка всех
файлов (как проектных, так и обычных) из памяти интерпретатора.
    213. 0 Установление заданного модуля в качестве текущего для выпол-
нения функций:
 ш1.0

    2:module 0 < 1Модуль 0>

 ш1.2
   Эта команда предназначена, в первую очередь, для разрешения кол-
лизий имён.
    214. 0 Вывод  на  экран дисплея списка всех имён объектов,  которые
находятся в текущем (если не задано иное) пространстве имён:
 ш1.0

    2:names 0  2[ 1pat 2]

 ш1.2
    215. 0 Вывод на экран дисплея списка всех объектов (функций,  пере-
менных, типов), определённых в заданных модулях:
 ш1.0

    2:browse 0 < 1Модуль_1 0> [< 1Модуль_2 0>...]

 ш1.2
   Имена модулей  должны  быть  разделены пробелом (в случае,  если
указано более одного имени модуля).
    216. 0 Вызов модуля с заданным именем на редактирование:
 ш1.0

    2:find 0 < 1Имя_модуля 0>

 ш1.2
   Если заданного имени нет ни в одном из текущих модулей, то выда-
ётся сообщение об ошибке:
 ш1.0

   ERROR - No current definition for name "<name>".

 ш1.2
    217. 0 Изменение текущего каталога, с которым работает HUGS 98:
 ш1.0

    2:cd 0 < 1Директория 0>

 ш1.2
    218. 0 Выход в операционную систему и выполнение заданной команды:
 ш1.0

     2:! 0< 1Команда 0>

 ш1.2
   Между символом "!" и именем команды операционной системы  пробел
отсутствует.
    219. 0 Вывод  на  экран  дисплея информации о версии установленного
интерпретатора языка Haskell и интегрированной среды HUGS 98:
 ш1.0

    2:version

 ш1.2
