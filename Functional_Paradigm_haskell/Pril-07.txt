    2ПРИЛОЖЕНИЕ 7.
    2Работа в составе коллектива разработчиков

 ш1.0
                                   1Программируйте в будущем времени.
                                                            1С.Мейерс
 ш1.2

                       2ТЕОРЕТИЧЕСКИЕ СВЕДЕНИЯ
    _ 1Целью . 0 данного Приложения является выработка начальных  представ-
лений  о  работе  в составе коллектива разработчиков путём изучения
основ организации и сопровождения программного проекта, а также ор-
ганизации  взаимодействия  разработчиков  отдельных  частей проекта
между собой и межмодульной интеграции.
                     3Основные умения разработчика
                       3программного обеспечения
    21. 0 Умение разобраться в постановке задачи,  решаемой другим раз-
работчиком;
    22. 0 Умение  обеспечить другого разработчика качественной и полной
информацией о текущем состоянии проекта,  особенностях реализации и
о предполагаемых направлениях развития проекта;
    23. 0 Умение сформулировать обоснованные критические  замечания  по
решению задачи другим разработчиком и,  возможно, найти ошибки реа-
лизации, а также сформулировать конкретные предложения по исправле-
нию (развитию, модернизации) проекта;
    24. 0 Умение включаться в процесс разработки.
                       3Должности программистов
   Мы не будем здесь говорить о должности  _ 1оператора ввода данных . 0, а
перейдём сразу к должностям, связанным с программированием.
   Первая должность,  на  которую  может  рассчитывать программист,
поступающий на работу после окончания университета (или имеющий не-
большой опыт программирования),  - это обычно  _ 1помощник программиста
(также известная как  _ 1младший программист . 0 или  _ 1программист . 1 0).  Долж-
ность  помощника программиста обычно считается начальной должностью
для тех, кто не имеет опыта практической работы программистом.
   На этой должности, как правило, не задерживаются более 6-8 меся-
цев. Работа на этой должности - лишь ознакомительный период, позво-
ляющий компании определить отношение сотрудника к работе,  его зна-
ния и навыки и его полезность. Помощник программиста не создаёт но-
вых программ;  он работает с программами, написанными другими прог-
раммистами, зачастую выполняя рутинную работу по обслуживанию прог-
рамм. В ознакомительный период помощник программиста вникает в дея-
тельность компании, знакомится с другими "компьютерщиками" и изуча-
ет наследие рабочего окружения компании.  Практически не бывает та-
ких случаев,  когда сотрудник задерживается на должности  помощника
программиста  в  течение  нескольких  лет и всё ещё работает в этой
компании.
   После нахождения  на  этой  должности  он  обычно выдвигается на
должность  _ 1программиста . 0.  Присвоение звания  программиста  означает,
что  компания  доверяет ему и ожидает от него максимальной отдачи в
ближайшие годы.  Программист имеет приличную оплату для своего  не-
большого опыта  и имеет больше обязанностей,  чем помощник програм-
миста. Основная работа программиста - также работать над программа-
ми,  написанными, обслуживать их и изменять в соответствии с новыми
требованиями.  В течение одного-двух лет программисту редко  прихо-
дится самому писать программы "с нуля". После успешной работе в те-
чение года руководитель программиста начинает доверять ему самосто-
ятельное  написание программ.  Конечно же,  подробное описание этих
программ (метод программирования "сверху вниз",  описание результа-
тов  и  прочая  документация) уже будет составлено,  и программисту
потребуется лишь реализовать эти потребности в новой программе.
   Через некоторое время отношение программиста к работе и его уче-
ба в ходе работы могут привести к  переходу  на  должность   _ 1старший
 _ 1программист . 0. Назначение  на  должность старшего программиста обычно
приводит к повышению оплаты и,  возможно, предоставлению отдельного
кабинета. Старший  программист в основном отвечает за написание но-
вых программ в соответствии с определёнными спецификациями. Старший
программист  не  должен  беспокоиться об обслуживании старого прог-
раммного кода,  поскольку этим теперь  занимаются  новые  помощники
программистов  и программисты.  В этом нет никакой несправедливости
или ошибки,  ведь пока вы ещё только  обучаетесь  программированию,
вам не может быть доверено создание новых проектов.
   На этой должности сотрудник может находиться несколько лет, раз-
рабатывая программы и вникая в работу компании, нужды пользователей
и основу уже существующих программ.
   Через несколько лет успешной работы (это время зависит от личных
качеств,  но обычно не превышает 2-3 лет) компания,  скорее  всего,
выдвинет сотрудника на следующую должность -  _ 1программный аналитик . 0.
   Программный аналитик отвечает за разработку программ. Хотя прог-
раммный  аналитик  мало занимается разработкой,  он непосредственно
работает с теми,  кто это делает.  Взаимодействуя с   _ 1разработчиками
(см.  далее),  программные аналитики могут рассматриваться как экс-
перты.  Программный аналитик больше  занимается  программированием,
чем анализом, но в ходе работы он получает знания, которые требуют-
ся для перехода на следующую ступеньку служебной лестницы.
   Следующим шагом является должность системного аналитика (специа-
листа по системному анализу). Системный аналитик не пишет программы
- вместо этого он занимается анализом и разработкой программ, кото-
рые будут писать другие.  Странно,  вы долго  учились,  чтобы  быть
программистом, и интенсивно работали в несколько лет только для то-
го, чтобы больше не писать программы? В действительности опыт прог-
раммирования является непременным атрибутом высококлассного систем-
ного аналитика. Не понимая, что даёт программирование, вы не сможе-
те разрабатывать структуру систем, с помощью которых другие сотруд-
ники будут создавать программы.
   Специалист по системному анализу является связующим звеном между
пользователями и отделами,  которым требуются  программы  обработки
данных.  Системный  аналитик общается с пользователями и с програм-
мистами.  Пользователи не понимают компьютерных тонкостей; они лишь
знают,  что им нужно (или им кажется,  что им нужно).  Пользователи
могут совместно с системным аналитиком  обсудить  требуемую  компь-
ютерную систему. Системный аналитик понимает, что нужно программис-
ту и что нужно конечному пользователю.  Программист ориентирован на
технику,  а пользователь зачастую не знает, что он хочет. Системный
аналитик при беседе с пользователем определяет,  каким должен  быть
результат, и выстраивает логическую цепочку, приводящую к нему.
   Должность системного аналитика является одной из наиболее уважа-
емой. Системный аналитик получает зарплату и страховые пособия, ко-
торые предназначены для сотрудников, занимающих руководящие посты в
фирме.  Зачастую  лицо,  ставшее системным аналитиком,  остаётся на
этой должности до пенсии. Некоторые компании отмечают успешный труд
в  должности системного аналитика назначением на должность  _ 1старшего
 _ 1системного аналитика . 0. Работа старшего системного аналитика ничем не
отличается от обязанностей системного аналитика,  однако новое наз-
начение - это больше, чем просто поощрение.
    3Замечание 0 [Перри,2002,с.341].
 ш1.1
   В маленьких  отделах  автоматизации один человек может совмещать
несколько должностей,  имея должность,  не совсем точно  отражающую
его обязанности. Например, в некоторых компаниях в компьютерном от-
деле может быть 2-3 человека. Все они могут составлять программы, а
также  выполнять  обязанности  системного аналитика и разработчика.
Небольшие компании дают возможность выполнять широкий спектр задач,
совершенствовать навыки и получить понятие обо всех должностях. Бо-
лее крупные компании обычно предоставляют больше льгот, более высо-
кую зарплату и безопасность труда,  но для развития различных навы-
ков вам придётся затратить больше времени.

 ш1.2
   Проработав несколько лет в должности системного аналитика,  сот-
рудник отлично  разбирается  в работе компании и отдела автоматиза-
ции. Системный аналитик  знает  большинство  пользователей  и  всех
"компьютерщиков", поскольку постоянно взаимодействует с ними.  Наб-
равшись опыта, этот сотрудник становится подходящей кандидатурой на
руководящую должность.
   Более высокий уровень оплаты, предлагаемой в компьютерной облас-
ти,  может быть двойным благом. Проработав в этой области несколько
лет, вы можете достичь уровня оплаты, значительно превышающую зарп-
лату сотрудников,  проработавших такое же количество времени в дру-
гих отделах.  Люди, которые стали системными аналитиками, для кото-
рых компьютеры не являются проблемой,  зачастую не могут расстаться
с  этой должностью.  Компании крайне редко переводят сотрудников на
должности, на которых они теряют в зарплате; такие сотрудники скоро
начинают искать другую работу.  Системные аналитики "зацикливаются"
на своей работе, без которой они не могут обойтись, если проработа-
ли на ней длительное время.  Единственное, что они могут сделать, -
перейти в другую компанию.
   Зачастую системные аналитики решают, что они уже созрели для уп-
равленческой деятельности.  Одна из первых должностей  руководящего
уровня в области обработки данных называется  _ 1менеджер проектов . 0 ( 1su-
 1pervisor 0).  Менеджеры проектов управляют небольшими группами  прог-
раммистов и аналитиков, руководят проектами с административной точ-
ки зрения (обеспечивает требуемые ресурсы для работы,  представляют
подчинённых к повышению и т.д.).  Желательно, чтобы менеджер проек-
тов имел опыт программирования. Поэтому большинство менеджеров про-
ектов выдвигаются с должностей системных аналитиков.
   С должности менеджера проектов в  дальнейшем  можно  перейти  на
должность  _ 1руководителя отдела обработки данных . 0 и управлять несколь-
кими менеджерами проектов и их проектами.
   Главный менеджер  отдела  обработки данных обычно называется  _ 1на-
 _ 1чальником . 0.  Начальник отдела обработки данных обычно имеет такой же
ранг, как вице-президенты других отделов компании. Одним из преиму-
ществ перехода на  должность  менеджера  проектов  или  руководящую
должность  является то,  что вы можете перейти на руководящую долж-
ность в другой отдел компании.  При достижении  руководящего  поста
ваша  зарплата  и  статус  будут превосходить аналогичные должности
других отделов.
    3Замечание 0.
 ш1.1
   Для программиста  вне  США  существует  норма:  17000 отлаженных
строк кода в год (или 68 строк отлаженного кода в день).

 ш1.2
                          3Консультирование
   Многие программисты  всю жизнь работают консультантами по компь-
ютерным технологиям.  Многие думают,  что с покупкой компьютера все
их проблемы будут решены,  и не осознают,  сколько знаний требуется
для эффективной эксплуатации компьютера.  В течение нескольких пос-
ледних  лет  у  программистов появилась возможность достичь успеха,
занимаясь консультированием.  В глазах клиентов вы можете оказаться
героем.  Так,  много  раз консультанты спешили к кому-нибудь на по-
мощь,  чтобы разобраться с сообщением об ошибке,  и  находили,  что
клиент  вставляет  дискету  не  той  стороной или забывает нажимать
кнопку готовности на принтере.
   Многие программисты работают консультантами,  и  постепенно  это
занятие превращается в основное. Они могут добиться такого же успе-
ха, как и при работе в компании.  Для работы  в  роли  консультанта
требуется не только язык.  Предложите помощь своему бухгалтеру, ад-
вокату или любому знакомому,  который использует компьютер. Скажите
ему,  что вы хотели бы приступить к консультированию и были бы рады
бесплатно посвятить ему час или два просто для того, чтобы увидеть,
как он работает.  Часто эти бесплатные консультации приводят к дол-
госрочным предложениям, которые выгодны как вам, так и вашим клиен-
там.
             3Должности, связанные с сетями и Интернетом
   Сетевой мир создал свой набор должностей, многие из которых час-
тично совпадают с уже описанными выше.  В настоящее время  програм-
мисты с помощью HTML-кода и Java-апплетов создают Web-страницы.
   Для программистов,  занимающихся разработкой программ для Интер-
нета,  имеются  отдельные должности:   _ 1Web-разработчик . 0,   _ 1Web-мастер . 0,
 _ 1HTML-программист . 0 или  _ 1TCP/IP-аналитик . 0  (TCP/IP  -  это  аббревиатура
названия коммуникационного протокола,  используемого Интернет-прог-
раммами).
   Огромная совокупность объединённых в сеть компьютеров также име-
ет собственный набор должностей.  Вы можете встретить такие  назва-
ния,  как  _ 1проектировщик локальных сетей . 0 ( 1LAN designer 0),   _ 1специалист
 _ 1по глобальным сетям . 0 ( 1WAN specialist 0),  а также должности  различных
руководителей,  занимающихся сетевыми технологиями, включая специа-
листов по сетевой безопасности.
    3Замечание 0 [Перри,2002,с.341].
 ш1.1
   LAN -  это  аббревиатура выражения 1 local area network 0 (локальная
сеть),  т.е. сеть, объединяющая два и более компьютера, находящихся
в одном помещении (здании).
   WAN - это аббревиатура выражение 1 wide area  network   0( 1глобальная
 1сеть 0), т.е. сеть, расположенная на территории одного или нескольких
городов (стран).

 ш1.2
   Поскольку эти должности относительно новые, большинство компаний
объединяет их с другими должностями.  Например, Java-специалист мо-
жет иметь такой же корпоративный статус и уровень оплаты, как прог-
раммист или программный аналитик, хотя Java-специалист должен скон-
центрироваться на сетевом языке Java.
    3Замечание 0 [Перри,2002,с.342].
 ш1.1
   Спрос играет большую роль в формировании тарифной сетки и корпо-
ративного уровня всех компьютерных должностей.
 ш1.2

                       2Экстремальные методики

 ш1.0
           1Разработка программного обеспечения - это сначала органи-
           1зация сотрудничества между людьми и только потом - приме-
           1нение систем программирования Java или C++. 0
                                                             1П.Аллен
 ш1.2

   В мире разработано множество распространённых методологий и под-
ходов к  организации процессов создания программного продукта.  Ус-
ловно их можно поделить на " 1тяжёлые 0" и " 1лёгкие 0". Есть и промежуточ-
ные решения, основанные, как правило, на  1спиральных моделях 0.
   Тяжёлые методологии  дают наибольший эффект в крупных компаниях,
занятых промышленным выпуском программного обеспечения и готовых на
многолетние  инвестиции  в кардинальную перестройку организационной
структуры.  Такие подходы обычно дают очень хорошие результаты,  но
процесс их внедрения растягивается на годы.
   Сегодня появились  новые  методы создания программного обеспече-
ния, ориентированные на эффективность,  и различные  формы  быстрой
(RAD) и итеративной разработки. Они делают наиболее важными качест-
вами менеджеров не знание "железа" и программ, а способность к  эф-
фективному ведению бизнеса, управлению проектами, знаниями. Важней-
шими требованиями,  предъявляемыми к  руководителям  подразделений,
становятся: гибкость  мышления,  влияние на людей,  умение находить
короткий путь к цели и системное мышление. Гибкие методы предназна-
чены для  использования  в небольших динамичных компаниях,  которые
работают в условиях сжатых сроков и быстро меняющихся требований  и
должны обеспечить достаточно высокое качество.
   Внедрение новых методологий не требует ни серьёзных инвестиций,
ни перестройки  структуры  фирмы  - сотрудникам надо просто догово-
риться о новом способе работы.
    _ 1Классическая методология  разработки  программного  обеспечения . 0,
используемая в мире уже не один десяток лет,  состоит из шести пос-
ледовательных этапов:
 ш1.1
   - анализ требований;
   - проектирование;
   - кодирование;
   - сборка;
   - тестирование;
   - внедрение и сопровождение.

 ш1.2
   На её основе разработаны конкретные популярные модели.
   Модель " 1Водопад 0" предусматривает последовательный переход от фа-
зы к фазе.  Отдельные этапы: определение системных требований, ана-
лиз требований к продукту, предварительное и детальное проектирова-
ние, кодирование, тестирование, объединение модулей, проверка рабо-
ты всей системы, комплексное и системное тестирование и внедрение -
выполняются по очереди.
   Последовательная модель также основана  на  возможности  чёткого
определения требований к проекту,  что позволяет создавать пилотные
прототипы, постепенно увеличивая общие  функциональные  возможности
системы и ведя разработку нескольких модулей параллельно.
   Главная проблема рассмотренных подходов -  это  экспоненциальный
рост  времени на устранение ошибок,  выявляемых на последних этапах
работы.  Особенно опасны ошибки, связанные с неверно спроектирован-
ной  архитектурой системы или с плохо сформулированными требования-
ми.
   На основе  последовательной модели была разработана  _ 1эволюционная
(или  _ 1спиральная . 0)  _ 1методология разработки  программного  обеспечения . 0,
которая ориентирована на использование в условиях, когда все требо-
вания не удаётся сформулировать заранее.  При этом происходит  мно-
гократное повторение цикла "анализ - проектирование - кодирование -
тестирование".
   В последние годы рынок программистских  услуг  стал  глобальным,
возникли и успешно работают множество виртуальных и оффшорных прог-
раммистских команд.  В этих условиях возросла конкуренция на выгод-
ные  заказы и появилась потребность в новых быстро внедряемых мето-
диках организации труда. Эти методики должны давать эффект, когда в
ходе работ возможны существенные изменения требований или когда во-
обще неизвестно, что будет собой представлять конечный продукт. При
этом  работу надо обязательно выполнить в заданный срок и уложиться
в рамки бюджета.  Используемые в таких  случаях  методики  получили
название  _ 1экстремальных . 0.
    2Определение 0 (по [Бобровский,2003,с.170]).
 ш1.1
    _ 1Экстремальные методики . 0 - это наборы рекомендаций, которые по от-
дельности  нередко выглядят противоречащими здравому смыслу и клас-
сическим схемам (отсюда и название -  1экстремальные методики 0).

 ш1.2
   Самое интересное,  что  в правильной комбинации эти рекомендации
превращаются в эффективный рабочий инструмент.
   Экстремальные методики  нацелены на скорейшее получение конкрет-
ного результата,  удовлетворение главных требований пользователя  и
последующую  более спокойную доработку системы в соответствии с до-
полнительными пожеланиями. При этом требования, как уже говорилось,
могут меняться весьма значительно (поэтому длительность каждой  1ите-
 1рации 0 невелика,  чаще всего - неделя). Направление развития системы
рассматривается  в первую очередь с точки зрения потенциальных рис-
ков (сложные или сомнительные, если говорить о прикладной полезнос-
ти,  функциональные возможности откладываются; учитывается близость
конечного срока и объёмы оставшихся бюджетных средств).
    _ 1Ограничение на использование экстремальных методик . 0.
 ш1.1
   Экстремальные методики работают только в рамках высокопроизводи-
тельной команды,  в которой отлажен механизм взаимодействия, а каж-
дый сотрудник способен переключаться на разные виды работ.

 ш1.2
            3Особенности применения экстремальных методик
   При использовании экстремальных методик роль  менеджера  проекта
становится ключевой.  Опытный руководитель нередко интуитивно чувс-
твует неполадки в ходе работ. Подобная интуиция основана на подсоз-
нательном анализе различных показателей процесса создания программ-
ного обеспечения,  к которым можно, например, отнести (по [Бобровс-
кий,2003,с.172]):
 ш1.1
   (1) существенное сокращение сроков разработки и тестирования;
   (2) задержки в передаче созданного кода сотруднику,  ответствен-
ному за контроль качества и процесс внедрения;
   (3) низкую посещаемость мероприятий по коллективному  обсуждению
проекта;
   (4) спад энтузиазма;
   (5) негативные  или двусмысленные комментарии сотрудников по по-
воду самого проекта или его руководителей;
   (6) частые конфликты в коллективе.

 ш1.2
   Перед обращением к экстремальным методикам надо постараться  оп-
ределить,  будет  ли сам проект экстремальным (например,  в случае,
если сроки очень сжаты,  а требования не определены) или  же  можно
обойтись классическим подходом. Если возможные пути развития проек-
та не ясны, всегда лучше планировать использование гибких подходов.
                   3Экстремальное программирование
   Познакомимся с  одной из наиболее популярных экстремальных мето-
дик -  _ 1экстремальным программированием . 0. Эту "лёгкую" методику приду-
мал  Кент  Бэк ( 1Kent Beck 0),  один из активных участников проекта по
развитию языка SmallTalk.
   К.Бэк использовал  для  создания экстремального программирования
достаточно простой подход:  брал различные методологические инстру-
менты  и,  если они выглядели (по его мнению) простыми и полезными,
обобщал на весь проект или применял в рамках очень коротких циклов.
   Например, в классических методиках считается, что  1тестирование 0 -
это хорошо,  и К.Бэк решил тестировать всё,  что можно,  и при этом
непрерывно.
   Если полезно проектирование системы,  значит,  анализ  и  синтез
структуры продукта надо выполнять ежедневно.
   Если важна простота при построении системы,  то целью разработки
становится скорейшее создание реально работающей системы, реализую-
щей минимум самой главной функциональности.
   Если эффективны  комплексные сборки (что позволяет выявить проб-
лемы с нестыковкой нескольких модулей) и интеграционное  тестирова-
ние, значит, будем делать это несколько раз в день.
   Если хорошо работают короткие итерационные циклы
 ш1.0

   " 1Анализ 0 ─ 76 0  1Проектирование 0 ─ 76 0  1Разработка 0 ─ 76 0  1Тестирование 0",

 ш1.2
значит, их продолжительность должна составлять не недели и  месяцы,
а часы или минуты.
   Если полезно документирование,  то  1вся документация включается в
 1код 0  и  представляет  собой списки правил,  принципов,  пожеланий и
уточнений, связанных с требованиями заказчика.
   Перечислим   _ 1двенадцать принципов экстремального программирования
(по [Бобровский,2003,с.171-172]; см. также [Бек,2016]):
 ш1.1
   (1)  _ 1взаимодействие . 0. От каждого сотрудника требуется умение синх-
ронизировать свою работу с деятельностью других людей и,  соответс-
твенно, понимать структуру всего процесса;
   (2)  _ 1выбор приоритетов . 0 (по Э.Йордану). На основе стоимостных оце-
нок решается, какая функциональность должна быть реализована обяза-
тельно, а что можно отсрочить;
   (3)  _ 1небольшие  релизы . 0.  Разработчики  выпускают  работоспособную
версию очень быстро и расширяют её возможности очень часто;
   (4)  _ 1система имён . 0.  В процессе разработки и общения  используется
единая терминология;
   (5)  _ 1простота проектирования . 0. Создаваемая программа будет простым
продуктом, отвечающим текущим требованиям заказчика;  в неё не зак-
ладываются возможности "на будущее";
   (6)  _ 1тестирование как методический приём . 0 (другими словами,  _ 1разра-
 _ 1ботка через тестирование . 0).  На протяжении всего проекта усилия сос-
редотачиваются на проверке создаваемой системы.
   Программисты  1предварительно 0 (что очень важно!) готовят тесты  на
основе  требований клиента,  а затем пишут программное обеспечение,
которое должно соответствовать этим тестам. Клиент выполняет приём-
ку результатов каждого теста,  чтобы убедиться,  что сделано именно
то, что ему надо.
   Подобный подход,  в частности, гарантирует соответствие продукта
заказанной функциональности;
   (7)  _ 1переоценка  потребностей . 0.  Разработчики  постоянно  улучшают
структуру продукта,  стараясь избегать повторов в работе и реализа-
ции ненужных возможностей;
   (8)  _ 1парная разработка . 0.  Программисты пишут программы парами - по
два человека  за  одним компьютером (один пишет код,  другой думает
над архитектурой).  Эффективность такого подхода доказана многочис-
ленными экспериментальными тестами.
   В частности,  1К.Бек 0 [2016,с.145] советует: "Если вы программируе-
те в паре, смена партнёра - это хороший способ отказаться от плохо-
го кода и начать решение задачи с начала...
   Если вы программируете в паре, позаботьтесь о том, чтобы вам бы-
ло удобно.  Расчистите пространство на столе, чтобы вам было удобно
передавать клавиатуру из рук в руки";
   (9)  _ 1коллективное владение . 0. Весь код принадлежит всем программис-
там. Каждый может вносить изменения в любую часть кода.  Все исход-
ные тексты пишутся в едином стиле;
   (10)  _ 1непрерывная  интеграция . 0.  сборка продукта выполняется много
раз в день.  Такой подход снимает множество проблем,  связанных  со
стыковкой модулей, разрабатываемых разными программистами;
   (11)  140- _часовая  рабочая  неделя . 0.  Усталые  программисты  делают
больше ошибок;
   (12)  _ 1выделенный пользователь . 0.  Группа может в любой момент обра-
титься к специалисту со стороны заказчика, способному уточнить тре-
бования, расставить приоритеты и ответить на вопросы программистов.
   При этом удаётся избежать излишней бумажной работы.

 ш1.2
   На первый взгляд,  описанная методология действительно  выглядит
экстремальной. Особенно удивительны и неожиданны идеи парной разра-
ботки и тестирования как способа определения требований к проекту.
   Однако большинство   1лёгких методик 0 как раз и отличается свежими,
нешаблонными решениями, дающими максимальный простор личной инициа-
тиве и творческим способностям программиста.  Ведь подобные способ-
ности стимулируются лучше всего тогда, когда удаётся предложить че-
ловеку возможность самостоятельно действовать в нестандартной ситу-
ации и непривычной обстановке.
