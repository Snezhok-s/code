   -- Демонстрация использования  библиотеки List для
   -- вычисления частот вхождения символов в заданные
   -- тексты с использованием функционалов
   -- ************************************
   import List

   -- ***************************************************
   -- Функция реализует частотный анализ букв текста word
   -- и возвращает список пар вида:
   --
   -- (Строка из символа,Частота появления в слове)
   --
   -------------------
   prob word = sort [(
                      [x],
                      fromInt (length (findIndices (==x) word)) /
                              (fromInt z)
                     )
                    | x <- nub word]
         where z = length word

   -- ***********************************************************
   -- Демонстрация частотного анализа 1000 цифр (после десятичной
   -- точки) чисел pi и e.
   -- Встречаемость цифр среди 200.000.000.000 цифр числа pi:
   --
   -- '0' : 20000030841;    '5' : 19999917053;
   -- '1' : 19999914711;    '6' : 19999881515;
   -- '2' : 20000136978;    '7' : 19999967594 
   -- '3' : 20000069393     '8' : 20000291044;
   -- '4' : 19999921691;    '9' : 19999869180 
   ------------------------------------------
   pi' = -- "3."++
           "14159265358979323846264338327950288419716939937510"++
           "58209749445923078164062862089986280348253421170679"++
           "82148086513282306647093844609550582231725359408128"++
           "48111745028410270193852110555964462294895493038196"++
           "44288109756659334461284756482337867831652712019091"++
           "45648566923460348610454326648213393607260249141273"++
           "72458700660631558817488152092096282925409171536436"++
           "78925903600113305305488204665213841469519415116094"++
           "33057270365759591953092186117381932611793105118548"++
           "07446237996274956735188575272489122793818301194912"++
           "98336733624406566430860213949463952247371907021798"++
           "60943702770539217176293176752384674818467669405132"++
           "00056812714526356082778577134275778960917363717872"++
           "14684409012249534301465495853710507922796892589235"++
           "42019956112129021960864034418159813629774771309960"++
           "51870721134999999837297804995105973173281609631859"++
           "50244594553469083026425223082533446850352619311881"++
           "71010003137838752886587533208381420617177669147303"++
           "59825349042875546873115956286388235378759375195778"++
           "18577805321712268066130019278766111959092164201989"

   e' = -- "2."++
          "71828182845904523536028747135266249775724709369995"++
          "95749669676277240766303535475945713821785251664274"++
          "27466391932003059921817413596629043572900334295260"++
          "59563073813232862794349076323382988075319525101901"++
          "15738341879307021540891499348841675092447614606680"++
          "82264800168477411853742345442437107539077744992069"++
          "55170276183860626133138458300075204493382656029760"++
          "67371132007093287091274437470472306969772093101416"++
          "92836819025515108657463772111252389784425056953696"++
          "77078544996996794686445490598793163688923009879312"++
          "77361782154249992295763514822082698951936680331825"++
          "28869398496465105820939239829488793320362509443117"++
          "30123819706841614039701983767932068328237646480429"++
          "53118023287825098194558153017567173613320698112509"++
          "96181881593041690351598888519345807273866738589422"++
          "87922849989208680582574927961048419844436346324496"++
          "84875602336248270419786232090021609902353043699418"++
          "49146314093431738143640546253152096183690888707016"++
          "76839642437814059271456354906130310720851038375051"++
          "01157477041718986106873969655212671546889570350354"

   -- *********************************************
   -- Функция возвращает список частот первой цифры
   -- для следующих степеней двойки:
   --
   --   1   2   3       n
   --  2 , 2 , 2 ,..., 2
   ----------------------------
   abc:: Int -> [(Char,Double)]
   abc n = map (\x -> (head x,fromInt (length x) / fromInt n))
               (groupBy (==) $ sort $ map (\x -> head $ show (2^x))
                                          [1..n])

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------
   test1 = prob pi'
   test2 = prob e'
   test3 = (sum $ map (\(a,b) -> b) (prob pi')) == 1%1
   test4 = (sum $ map (\(a,b) -> b) (prob e')) == 1%1
   test5 = abc 1000
