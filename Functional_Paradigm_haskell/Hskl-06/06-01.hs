   -- Демонстрация синтаксиса и семантики функционала map
   -- ***************************************************
   -- Функция возвращает результат возведения всех
   -- элементов числового списка в квадрат
   ---------------------------------------
   sqList:: [Int] -> [Int]
   sqList lst | null lst = lst
              | True     = map (\x -> x*x) lst

   --------------------------------------------------
   -- Функция, возвращающая конечный список квадратов
   -- натуральных чисел 0,2,4,6,8,...,n
   ------------------------------------
   squares:: Int -> [Int]
   squares n = map (\x -> x^2)   -- map (^2)
                   [0,2..n]      --     [0,2..n]

   ------------------------------------------------
   -- Функция, возвращающая длину каждого подсписка 
   -- исходного двухуровневого списка
   ----------------------------------
   func:: [[Int]] -> [Int]
   func lst = map length lst

   ---------------------------------------------------------
   -- Функция, возвращающая пару, у которой первый компонент
   -- является  суммой  квадратов, а  второй - произведением
   -- квадратов элементов числового списка lst
   -------------------------------------------
   f1:: [Int] -> (Int,Int)
   f1 lst = (sum z,product z)
              where z = map (^2) lst

   -- **********************************************
   -- Демонстрация табулирования функции y=arccos(x)
   -- на заданном отрезке [-1.0,1.0]
   ---------------------------------------------------------
   fcos = map (\x -> (x,acos x)) ([-1.0,-0.9..0.9] ++ [1.0])
   ---------------------------------------------------------
   res  = [(-1.0,3.14159),(-0.9,2.69057),(-0.8,2.49809),
           (-0.7,2.34619),(-0.6,2.2143), (-0.5,2.09439),
           (-0.4,1.98231),(-0.3,1.87549),(-0.2,1.77215),
           (-0.0999998,1.67096),(2.38419e-007,1.5708),
           (0.1,1.47063), (0.2,1.36944),(0.3,1.2661),(0.4,1.15928),
           (0.5,1.0472),(0.6,0.927295),(0.7,0.795398),(0.8,0.6435),
           (0.9,0.451026),(1.0,0.0)]

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------------
   test1 =   sqList []            == []
          && sqList [5]           == [25]
          && sqList [1,2,3,4]     == [1,4,9,16]
          && sqList [-1,-2,-3,-4] == [1,4,9,16]
   ----------------------------------------------
   test2 =   func [[1,2],[3,4]]          == [2,2]
          && func [[1],[],[2,3,4,5]]     == [1,0,4] 
          && func [[1],[2..10],[2,4..6]] == [1,9,3] 
   ------------------------------------------------
   test3 = squares 10 == [0,4,16,36,64,100]
   ----------------------------------------
   test4 =   f1 [1,2,3]     == (14,36) 
          && f1 [1,2,3,5,6] == (75,32400)
   --------------------------------------------
   test5 = zipWith (\x -> \y -> (x,y)) fcos res
