   -- Моделирование элементарной работы
   -- с "гирляндо-висюлечной" структурой
   -- **********************************
   perest lst | null $ tail lst
                     = error "Bad"
              | True = head (tail lst) : head lst
                                       : tail (tail lst)
   -----------------------------------------------------
   gir lst = map (\(x,_) -> x) lst
   --------------------------------------
   vis i lst = map (\(_,x) -> x) lst !! i
   ---------------------------------------------
   summa lst = sum $ concatMap (\(_,x) -> x) lst
   ---------------------------------------------
   rev lst = map (\(x,y) -> (x,reverse y)) lst
   ----------------------------------------------
   inv lst = [(fst $ head lst,snd $ last lst)] ++ 
             (init $ tail lst) ++
             [(fst $ last lst,snd $ head lst)]

   -- ************************************************
   -- Функция возвращает все простые числа на [2..100]
   ---------------------------------------------------
   f1 = map (\x -> (x,prime 2 x)) [2..100]
   --------------------------------------------------------------
   f2 n = toRational (length $ filter (\x -> prime 2 x) [2..n]) /
          (toRational n)  
   -----------------------------------------------------
   f3 = map (\x -> fromRational $ f2 x) [100,200..50000]
   -----------------------------------------------------
   -- Предикат, определяющий "простоту" натурального
   -- числа p; при запуске d=2
   ----------------------------------
   prime:: Integer -> Integer -> Bool
   prime d p | d*d>p        = True
             | p `mod` d==0 = False
             | True         = prime (d+1) p

   -- ***************************
   -- Неудачные тестовые примеры:
   --------------------------------------------------
   lst  = [(1,[11,12]),(2,[21,22,23]),(3,[31,32,33])]
   lst1 = [("asd",[11,12]),("dfg",[21,22]),("f",[31,32])]
   lst2 = [('a',[11,12]),('d',[21,22]),('f',[31,32])]
   lst3 = [(1,[11,12])]
