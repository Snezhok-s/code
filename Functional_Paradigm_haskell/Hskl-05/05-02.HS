   -- Демонстрация полиморфной функции, вычисляющей длину
   -- списка с использованием рекурсии по аргументам
   -------------------------------------------------
   lstLen:: [a] -> Integer
   lstLen []     = 0
   lstLen (x:xs) = 1 + lstLen xs     -- (+) 1 (lstLen xs)
   ------------------------------------------------------
   -- Демонстрация полиморфной функции, вычисляющей длину
   -- списка с использованием рекурсии по значению
   -----------------------------------------------
   main:: [a] -> Integer
   main lst = lstLen' lst 0
       where lstLen'   []   b = b
             lstLen' (_:xs) b = lstLen' xs (b+1)

   -- ***********************************
   -- Функции для нахождения длины списка
   -- из библиотеки Prelude
   ------------------------
   length':: [a] -> Int
   length' = foldl'' (\n _ -> n+1) 0
   ----------------------------------------
   foldl'':: (a -> b -> a) -> a -> [b] -> a
   foldl'' f a []     = a
   foldl'' f a (x:xs) = (foldl'' f $! f a x) xs
                        -- Попробуйте убрать символ "!"...

   -- ***********************************************
   -- Демонстрация неполиморфной функции, вычисляющей 
   -- сумму элементов числового списка
   -----------------------------------
   lstSum:: [Int] -> Int
   lstSum []     = error "Функция не определена"
   lstSum [x]    = x
   lstSum (x:xs) = x + lstSum xs

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------------------
   test1 =   lstLen []                   == 0
          && lstLen [1]                  == 1
          && lstLen [1,2]                == 2
          && lstLen [1.2,3.234,0.000001] == 3
          && lstLen ['a','b','c','d']    == 4
          && lstLen ["a b","cde fg h"]   == 2
   ------------------------------------------
   test2 = lstLen  [1..3990]
   test3 = main    [1..5324]
   test4 = length' [1..6000]
   -------------------------------------------
   test5 =   lstSum [2]               ==     2
          && lstSum [1,2,0]           ==     3
          && lstSum [1,2,0,-1,-2]     ==     0
          && lstSum [-100,2,0,-10,-2] == (-110)
