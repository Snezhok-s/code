   import List (delete)

   -- ***************************************************
   -- Демонстрация использования сопоставления с образцом
   -- на примере удаления элементов из  заданного списка,
   -- расположенных на  ч ё т н ы х  местах
   ----------------------------------------
   ud1:: [a] -> [a] 
   ud1 []        = []
   ud1 [x]       = [x]
   ud1 (x:y:lst) = x : ud1 lst
   ---------------------------------------------------
   -- Демонстрация использования охранных выражений на
   -- примере удаления элементов из  заданного списка,
   -- расположенных на  ч ё т н ы х  местах
   ----------------------------------------
   ud2:: [a] -> [a]
   ud2 lst | null lst        = []
           | null $ tail lst = lst
           | True            = head lst : ud2 (tail $ tail lst)

   -- ***************************************************
   -- Демонстрация использования сопоставления с образцом
   -- на примере удаления элементов из  заданного списка,
   -- расположенных на  н е ч ё т н ы х  местах
   --------------------------------------------
   ud3:: [a] -> [a] 
   ud3 []        = []
   ud3 [x]       = []
   ud3 (x:y:lst) = y : ud3 lst

   -- ***************************************************
   -- Функция, удаляющая  в с е  элементы x из списка lst
   -- (неэффективная функция)
   -------------------------------------
   delAll x lst | not $ elem x lst = lst
                | True             = delAll x (delete x lst)
   ---------------------------------------------------------
   -- Функция удаляет  в с е  элементы x из списка lst
   -- (более эффективная функция)
   ---------------------------------
   delAll' x lst | null lst    = lst
                 | x==head lst = delAll' x (tail lst)
                 | True        = (:) (head lst) (delAll' x (tail lst))

   -- ***************************
   -- Неудачные тестовые примеры:
   --------------------------------------------------
   test1 =   ud1 [2]                           == [2]
          && ud1 [2,-2]                        == [2]
          && ud1 [2,-2,-3,3,-4]                == [2,-3,-4]
          && ud1 [1,2,3,4,5,6,7,8,9]           == [1,3,5,7,9]
          && ud1 [[1],[2,3],[4,5,6,7],[8],[9]] == 
                 [[1],      [4,5,6,7],    [9]]
           ------------------------------------------
          && ud2 [2]                           == [2]
          && ud2 [2,-2]                        == [2]
          && ud2 [2,-2,-3,3,-4]                == [2,-3,-4]
          && ud2 [1,2,3,4,5,6,7,8,9]           == 
                 [1,  3,  5,  7,  9]
          && ud2 [[1],[2,3],[4,5,6,7],[8],[9]] == 
                 [[1],      [4,5,6,7],    [9]]
          ------------------------------------------
          && ud3 [2]                           == []
          && ud3 [2,-2]                        == [-2]
          && ud3 [2,-2,-3,3,-4]                == [-2,3]
          && ud3 [1,2,3,4,5,6,7,8,9]           == 
                 [  2,  4,  6,  8  ]
          && ud3 [[1],[2,3],[4,5,6,7],[8],[9]] == 
                 [    [2,3],          [8]    ]
   -------------------------------------------
   test2 = putStr (ud1 [])
   test3 = putStr (ud2 [])
   ------------------------------------
   test4 = delAll  'a' "1a2a3a4a5a6a7a"
   test5 = delAll' 'a' "1a2a3a4a5a6a7a"
