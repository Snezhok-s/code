   -- Демонстрация элементарного лексического анализа:
   -- функция, которая  по строке атомов  конструирует
   -- список атомов (модель встроенной функции words)
   --------------------------------------------------
   lexAn:: String -> [String]
   lexAn str | null str = []
             | True     = seeW str "" []
   ---------------------------------------
   seeW str atm lst | null str && null atm
                                = lst
                    | null str  = lst++[atm]
                    | head str==' ' && not (null atm)
                                = seeW (tail str) "" (lst++[atm])
                    | head str==' ' && null atm
                                = seeW (tail str) "" lst
                    | True      = seeW (tail str) 
                                       (atm++[head str]) lst
   ---------------------------------------------------------
   -- Неудачные тестовые примеры:
   ---------------------------------------
   test =   lexAn " 1"            == ["1"]
         && lexAn "1 "            == ["1"]
         && lexAn " 1 "           == ["1"]
         && lexAn "  1 2 3 4 5"   == ["1","2","3","4","5"]
         && lexAn "    1 2 3 4 5" == ["1","2","3","4","5"]
         && lexAn "1 2 3 4 5 "    == ["1","2","3","4","5"]
         && lexAn "1 2 3 4 5   "  == ["1","2","3","4","5"]
         && lexAn " 1 2 3 4 5 "   == ["1","2","3","4","5"]
         && lexAn "   1 2 3 4   " == ["1","2","3","4"]
         && lexAn "1 2 3 4 5 6"   == ["1","2","3","4","5","6"]
         && lexAn "asd w qweq 45" == ["asd","w","qweq","45"]
         && lexAn " 1  2   3    4    5   6  7 "
                                  == ["1","2","3","4","5","6","7"]
         && lexAn " 1 2    3    4 5 6   "
                                  == ["1","2","3","4","5","6"]
         && lexAn "a b c d e fgh" == ["a","b","c","d","e","fgh"]
         && lexAn "12 13 4 3 54"  == ["12","13","4","3","54"]

