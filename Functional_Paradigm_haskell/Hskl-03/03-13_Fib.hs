   -- Демонстрация применения  р е ф а к т о р и н г а  про-
   -- грамм на примере функции, вычисляющей n-ое число Фибо-
   -- наччи с помощью рекуррентных соотношений:
   --
   --  f(0)=1, f(1)=1,
   --
   --  f(x) = f(x-1) + f(x-2)
   --
   -- ***********************
   fib:: Integer -> Integer
   fib 0     = 1
   fib 1     = 1
   fib (n+1) = fib n + fib (n-1)

   -- =============================================
   -- Результат рефакторинга (п е р в ы й  вариант)
   ------------------------------------------------
   f 0 = 1
   f 1 = 1
   f n = u+v
      where (u,v)=g (n-2)
   ----------------------
   g 0 = (1,1)
   g n = (u+v,u)
      where (u,v)=g (n-1)

   -- *************************************************
   -- Функция, возвращающая аргумент функции Фибоначчи,
   -- для которого значение функции меньше 4294967295
   -----------------------------------------------------
   len = fst $ last $ takeWhile (\(x,y) -> y<4294967295)
                                (map (\x -> (x, f x)) [1..])

   -----------------------------------------------
   -- Приведём код для сравнения времени работы... 
   ------------------------------------------------------
   len' = fst $ last $ takeWhile (\(x,y) -> y<4294967295)
                                 (map (\x -> (x, fib x)) [1..])

   -- =============================================
   -- Результат рефакторинга (в т о р о й  вариант)
   ------------------------------------------------
   fibP :: Integer -> (Integer, Integer)
   fibP 0 = (0,1)
   fibP n = (b,a+b)
       where (a,b) = fibP (n-1)

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------
   test1 =   fib 11 ==     144 
          && fib 23 ==   46368
   ---------------------------
   test2 =   f 11   ==     144 
          && f 23   ==   46368
          && f 30   == 1346269
   -------------------------------
   test3 = f 3000+f 3001 == f 3002
   -------------------------------
   test4 n = a + b == c
        where z1 = fibP n
              z2 = fibP $ succ n
              a  = fst z1;
              b  = snd z1;
              c  = snd z2
