   -- Демонстрация определения "простоты" натурального числа.
   --
   -- Авторы: преподаватели (05.09.2015)
   -- **********************************

   -- ==========================================================
   -- П е р в ы й  способ. Предикат, определяющий "простоту" на-
   --                      турального числа p; при запуске d=2
   -----------------------------------------------------------
   prime1:: Integer -> Integer -> Bool
   prime1 p d | d*d > p      = True
              | p `mod` d==0 = False
              | True         = prime1 p (d+1)
   -------------------------------------------
   test1 = map (\x -> (x, prime1 x 2)) [2..20]

   -- ===================================================
   -- В т о р о й  способ. Функция-предикат, распознающая
   --                      простое число x
   ---------------------------------------
   prime2 n | n==2         = True
            | n `mod` 2==0 = False
            | True         = prime2' n 
                                     3
                                     (truncate $ sqrt (fromInteger n))
   -------------------------------------------------------------------
   prime2' n k m | k>m  = True
                 | True = n `mod` k/=0 && prime2' n (k+2) m
   --------------------------------------------------------
   test2 = map (\x -> (x, prime2 x)) [2..20]

   -- ===================================================
   -- Т р е т и й  способ. Функция-предикат, распознающая
   --                      простое число x
   ---------------------------------------
   prime3 n | n==2         = True
            | n `mod` 2==0 = False
            | True         = prime3' n
                                     3
                                     (truncate $ sqrt (fromInteger n))
   -------------------------------------------------------------------
   prime3' n k m | k>m          = True
                 | n `mod` k/=0 = prime3' n (k+2) m
                 | True         = False
   -----------------------------------------
   test3 = map (\x -> (x, prime3 x)) [2..20]

   -- =========================================================
   -- Ч е т в ё р т ы й  способ. Функция-предикат, распознающая
   --                            простое число x
   ---------------------------------------------
   isPrime x = dividers x==[1,x]
   ------------------------------------------
   dividers n = [x | x <- [1..n], mod n x==0]

   -- *************************************************
   -- П я т ы й  способ. Функция-предикат, распознающая
   --                    простое число x
   -------------------------------------
   prime5:: Integer -> Bool
   prime5 n = all (\x -> n `mod` x /=0) [2..m]
       where m = truncate $ sqrt (fromInteger n)
   ---------------------------------------------
   test5 = map (\x -> (x,prime5 x)) [2..20]

   -- =============================================
   -- Функции, связанные с построенными предикатами
   -- =============================================

   -- =======================================================
   -- Функция возвращает  в с е  простые числа из [2..100000]
   ----------------------------------------------------------
   f1 = filter (\x -> prime1 x 2) [2..100000]

   -- ====================================
   -- Функция, возвращающая список простых
   -- чисел вида (2 ^ n + 1) 
   ----------------------------------------
   f2 = filter prime3 $ map (\n -> 2^n + 1) 
                            [1..]

   -- =========================================================
   -- Прагматику следующих функций установите самостоятельно...
   ---------------------------------------------------------------
   f3 n = toRational (length $ filter (\x -> prime1 x 2) [2..n]) /
                     (toRational n)  
   f4 = map (\x -> fromRational $ f3 x) [100,200..50000]
