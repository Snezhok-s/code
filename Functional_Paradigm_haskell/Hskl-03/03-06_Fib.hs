   -- Демонстрация использования  п а р а л л е л ь н о й
   -- р е к у р с и и   на  примере  функции, вычисляющей
   -- n-ое число Фибоначчи:
   --  (1) с помощью рекуррентного соотношения:
   --
   --     f(0)=1, f(1)=1, f(x) = f(x-1) + f(x-2), x=2,3,...;
   --
   --  (2) с помощью рекуррентного соотношения:
   --
   --                            2            n
   --     f(2n)=f(n)*f(n-1) + 2*f (n-1) + (-1) ;
   --                               2
   --     f(2n+1)=2*f(n)*f(n+1)) - f (n);
   --
   --  (3) с помощью рекуррентного соотношения:
   --                                                 n
   --     f(2n)=(f(n+1)-f(n)) * (2*f(n+1)-f(n)) + (-1) ;
   --                              2
   --     f(2n+1)=2*f(n)*f(n+1) - f (n);
   --
   --  (4) с помощью рекуррентного соотношения:
   --
   --                            2            n
   --     f(2n)=f(n)*f(n-1) + 2*f (n-1) + (-1) ;
   --                                       2
   --     f(2n+1)=2*f(n) * (f(n)+f(n-1)) - f (n).
   --
   -- *************************************
   -- (1) Самая неэффективная реализация...
   ----------------------------------------
   fib:: Integer -> Integer
   fib 0     = 1
   fib 1     = 1
   fib (n+1) = fib n + fib (n-1)
   -----------------------------
   fib':: Integer -> Integer
   fib' n | n==0 = 1
          | n==1 = 1
          | True = fib' (n-1) + fib' (n-2)

   -- ==================================================
   -- Реализация с помощью комбинатора неподвижной точки
   -----------------------------------------------------
   fib'':: (Num a, Num b) => (a -> b) -> a -> b
   fib'' g n | n==0 = 1
             | n==1 = 1
             | True = g (n-1) + g (n-2)
   ------------------------------------
   fib''' x = y fib'' x
        where y f = f (y f)

   -- ===================================
   -- (2) Более эффективные реализации...
   --------------------------------------
   fib_2:: Integer -> Integer
   fib_2 n | n==0 = 1                                            
           | n==1 = 1                                            
           | True = if even n                                    
                      then fib_2 t * fib_2 (t-1)               
                           + 2 * fib_2 (t-1) * fib_2 (t-1) + (-1)^t
                      else 2 * fib_2 s * fib_2 (s+1)
                           - fib_2 s * fib_2 s                     
      where t =   n   `div` 2                                   
            s = (n-1) `div` 2                               

   ---------------------------
   fib_3:: Integer -> Integer
   fib_3 n | n==1 = 1                                            
           | n==2 = 2                                            
           | True = if even n                                    
                      then (fib_3 (t+1) - fib_3 t)
                           * (2 * fib_3 (t+1) - fib_3 t) + (-1)^t
                      else 2 * fib_3 s * fib_3 (s+1)
                           - fib_3 s * fib_3 s                     
      where t =   n   `div` 2                                   
            s = (n-1) `div` 2                               

   ---------------------------
   fib_4:: Integer -> Integer
   fib_4 n | n==0 = 1                                            
           | n==1 = 1                                            
           | True = if even n                                    
                      then fib_4 t * fib_4 (t-1)
                           + 2 * fib_4 (t-1) * fib_4 (t-1) + (-1)^t
                      else 2 * fib_4 s * (fib_4 s + fib_4 (s-1))
                           - fib_4 s * fib_4 s                     
      where t =   n   `div` 2                                   
            s = (n-1) `div` 2                               

   -- =============================
   -- (3) Эффективные реализации...
   --------------------------------
   f 0 = 1
   f 1 = 1
   f n = u+v
      where (u,v)=g (n-2)
   ----------------------
   g 0 = (1,1)
   g n = (u+v,u)
      where (u,v)=g (n-1)

   ------------------------------------
   f_P :: Integer -> (Integer,Integer)
   f_P 0 = (0, 1)
   f_P n = (b, a+b)
       where (a, b) = f_P (n-1)

   -- ================================================
   -- Демонстрация  о д н о с т о р о н н е й  функции
   -- y = f x.
   -- Функция, возвращающая аргумент функции Фибоначчи,
   -- для которого значение функции меньше (f z)
   --------------------------------------------------
   len z = fst $ last $ takeWhile (\(x,y) -> y < f z)
                                               -- 4294967295)
                                  (map (\x -> (x, f x)) [2..])

   -- ***************************
   -- Неудачные тестовые примеры:
   ------------------------------------------
   test1 = fib  11 == 144 && fib  23 == 46368
   test2 = fib' 11 == 144 && fib' 23 == 46368
   test3 = fib  30 == fib' 30
   --------------------------------------------
   test4 = fib_2 11 == 144 && fib_2 23 == 46368
   test5 = fib_2 11 == 144 && fib_2 23 == 46368
   test6 = fib_2 130 + fib_2 131       == fib_2 132
   test7 = map (\x -> fib' x == fib_2 x)
               [0..23]
   ---------------------------------------------
   test8  = fib_3 11 == 144 && fib_3 23 == 46368
   test9  = fib_3 11 == 144 && fib_3 23 == 46368
   test10 = fib_3 130 + fib_3 131       == fib_3 132
   test11 = map (\x -> fib_2 x == fib_3 x) 
                [100..115]
   ---------------------------------------------
   test12 = fib_4 11 == 144 && fib_4 23 == 46368
   test13 = fib_4 11 == 144 && fib_4 23 == 46368
   test14 = fib_4 130 + fib_4 131       == fib_4 132
   test15 = map (\x -> fib_3 x == fib_4 x) 
                [100..115]
   -----------------------------
   test16 = map (\f -> f $  200) 
                [fib_2, fib_3, fib_4]
   test17 = map (\f -> f $ 5320) 
                [f, (snd . f_P)]
   -------------------------------
   test18 = map (\x -> (x, len x))
                [100..1000]
   test19 = all (\y -> 0 == y) $ map (\x -> fib' x - f x)
                                     [1..26]
 
   test20 = f 999 == 43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875
