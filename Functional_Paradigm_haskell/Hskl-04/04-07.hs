   -- Демонстрация функций, код которых содержит:
   --  (1) определители списков;
   --  (2) "синтаксический сахар" в записи списков
   -- ********************************************

   -------------------------------------------------
   -- Функция, конструирующаяй список из отрицатель-
   -- ных элементов числового списка xs 
   ----------------------------------------------
   negLst:: [Int] -> [Int]
   negLst xs = [x | x <- xs, x<0]

   ------------------------------------------------
   -- Функция, конструирующая список из чётных эле-
   -- ментов числового списка xs
   -----------------------------
   evenLst:: [Int] -> [Int]
   evenLst xs = [x | x <- xs, x `mod` 2 == 0]

   -----------------------------------------------
   -- Функция, конструирующая список пар элементов
   -- списков xs и ys и таких, что первый  элемент
   -- пары должен быть не меньше второго элемента
   ----------------------------------------------
   para:: [Int] -> [Int] -> [(Int,Int)]
   para xs ys = [(x,y) | x <- xs, y <- ys, x>=y]

   -----------------------------------------------------
   -- Функции, конструирующие с помощью "синтаксического
   -- сахара"  к о н е ч н ы е  n-элементные списки:
   --  (1) натуральных чисел;
   --  (2) нечётных натуральных чисел;
   --  (3) квадратов натуральных чисел;
   --  (4) степеней числа 2;
   --  (5) факториалов
   -------------------
   f1 n = [1..n]                -- Шаг равен 1...
   f2 n = [1,3..n]              -- Шаг равен 2...
   f3 n = map (^ 2) [1..n]      -- Использована этта-редукция...
   f4 n = map (2 ^) [1..n]      -- Использована этта-редукция...
   -------------------------------------------------------------
   f5 n = map fact [1..n]       -- Использована этта-редукция...
       where fact 0 = 1
             fact x = x * fact (x-1)

   -- ***************************
   -- Неудачные тестовые примеры:
   -----------------------------------------
   test1 =   negLst []                 == []
          && negLst [-4]               == [-4]
          && negLst [4]                == []
          && negLst [-1,2,-3]          == [-1,-3]
          && negLst [1,2,3,4,5]        == []
          && negLst [-1,-2,-3,-4]      == [-1,-2,-3,-4]
          && negLst [1,-2,3,-4,-5,6,7] == [-2,-4,-5]
   -------------------------------------------------
   test2 =   evenLst []                        == []
          && evenLst [1]                       == []
          && evenLst [1,2]                     == [2]
          && evenLst [1,2,-3,-4,5,6]           == [2,-4,6]
          && evenLst [10,22,314,411,523,61111] == [10,22,314]
          && evenLst [-11,314,411,-522,61111]  == [314,-522]
   --------------------------------------------------------------
   test3 =   para [3] [-1,0,-3,5]        == [(3,-1),(3,0),(3,-3)]
          && para [3,4,5] [6,78]         == []
          && para [1] []                 == []
          && para [] [2]                 == []
          && para [2] [1]                == [(2,1)]
          && para [-3,-4,5] [-6,-2,78,4] == [(-3,-6),(-4,-6),
                                             (5,-6),(5,-2),(5,4)]
   --------------------------------------------------------------
   test4 =   f1 5 == [1,2,3,4,5]
          && f2 5 == [1,3,5]
          && f3 5 == [1,4,9,16,25]
          && f4 5 == [1,2,6,24,120]
          && f5 5 == [2,4,8,16,32]
